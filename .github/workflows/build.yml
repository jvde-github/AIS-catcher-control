name: Build AIS-catcher-control Executables

# Trigger the workflow on push to the main branch and on pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-release:
    name: Build and Release for Raspberry Pi
    runs-on: ubuntu-latest

    # Grant the workflow necessary permissions
    permissions:
      contents: write    # Required to create/update releases and upload assets
      actions: read      # Default permission

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Specify the Go version you are using

      # Step 3: Cache Go modules to speed up builds
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Download Dependencies
      - name: Download Dependencies
        run: go mod tidy

      # Step 5: Run Tests (Optional but Recommended)
      - name: Run Tests
        run: go test ./...

      # Step 6: Build armhf Executable (Raspberry Pi Zero)
      - name: Build armhf Executable
        env:
          GOOS: linux
          GOARCH: arm
          GOARM: 5        # Set to 5 to avoid hardware floating point
          CGO_ENABLED: 0  # Disable CGO for static binaries
        run: |
          echo "Building for GOOS=${GOOS}, GOARCH=${GOARCH}, GOARM=${GOARM}"
          mkdir -p build
          go build -ldflags="-s -w" -o build/AIS-catcher-control_armhf .

      # Step 7: Build arm64 Executable (64-bit Raspberry Pi)
      - name: Build arm64 Executable
        env:
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: 0  # Disable CGO for static binaries
        run: |
          echo "Building for GOOS=${GOOS}, GOARCH=${GOARCH}"
          mkdir -p build
          go build -ldflags="-s -w" -o build/AIS-catcher-control_arm64 .

      # Step 8: List build directory to verify executables
      - name: List Build Directory
        run: ls -la build/

      # Step 9: Create Release and Upload Assets
      - name: Create Release and Upload Assets
        uses: ncipollo/release-action@v1
        with:
          tag: latest
          name: Latest AIS-catcher-control Release
          body: 'Automatically generated release with the latest build.'
          files: |
            build/AIS-catcher-control_armhf
            build/AIS-catcher-control_arm64
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
