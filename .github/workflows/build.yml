name: Build AIS-catcher-control Executables and Docker Images

# Trigger the workflow on push to the main branch and on pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  Docker:
    runs-on: ubuntu-latest  
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main

      - name: Calculate Container Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=v0.1,branch=main
            type=ref,event=tag

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Images
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64, linux/386, linux/arm64, linux/arm/v6, linux/arm/v7
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          
  build-and-release:
  
    name: Build and Release for Raspberry Pi and Docker Images
    runs-on: ubuntu-latest

    # Grant the workflow necessary permissions
    permissions:
      contents: write    # Required to create/update releases and upload assets
      actions: read      # Default permission

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Set up Go environment
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20' # Specify the Go version you are using

      # Step 3: Cache Go modules to speed up builds
      - name: Cache Go Modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # Step 4: Download Dependencies
      - name: Download Dependencies
        run: go mod tidy

      # Step 5: Run Tests (Optional but Recommended)
      - name: Run Tests
        run: go test ./...

      # Step 6: Build armhf Executable (Raspberry Pi Zero)
      - name: Build armhf Executable
        env:
          GOOS: linux
          GOARCH: arm
          GOARM: 5        # Set to 5 to avoid hardware floating point
          CGO_ENABLED: 0  # Disable CGO for static binaries
        run: |
          echo "Building for GOOS=${GOOS}, GOARCH=${GOARCH}, GOARM=${GOARM}"
          mkdir -p build
          go build -ldflags="-s -w" -o build/AIS-catcher-control_armhf .

      # Step 7: Build arm64 Executable (64-bit Raspberry Pi)
      - name: Build arm64 Executable
        env:
          GOOS: linux
          GOARCH: arm64
          CGO_ENABLED: 0  # Disable CGO for static binaries
        run: |
          echo "Building for GOOS=${GOOS}, GOARCH=${GOARCH}"
          mkdir -p build
          go build -ldflags="-s -w" -o build/AIS-catcher-control_arm64 .

      # Step 8: Upload Artifacts to GitHub Actions
      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: AIS-catcher-control_binaries
          path: build/*

      # Step 9: Get the latest release
      - name: Get the Latest Release
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const latestRelease = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            core.setOutput('release_id', latestRelease.data.id);

      # Step 10: Upload Assets to the Latest Release
      - name: Upload Assets to Latest Release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');

            const releaseId = '${{ steps.get_latest_release.outputs.release_id }}';

            const assets = fs.readdirSync('build').map(fileName => {
              return {
                name: fileName,
                path: path.join('build', fileName)
              }
            });

            for (const asset of assets) {
              const contentLength = fs.statSync(asset.path).size;
              const headers = {
                'content-type': 'application/octet-stream',
                'content-length': contentLength
              };

              // Check if the asset already exists
              const existingAssets = await github.rest.repos.listReleaseAssets({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
              });

              const existingAsset = existingAssets.data.find(a => a.name === asset.name);
              if (existingAsset) {
                // Delete the existing asset
                await github.rest.repos.deleteReleaseAsset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  asset_id: existingAsset.id
                });
              }

              // Upload the new asset
              await github.rest.repos.uploadReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: releaseId,
                name: asset.name,
                data: fs.readFileSync(asset.path),
                headers: headers
              });
            }


